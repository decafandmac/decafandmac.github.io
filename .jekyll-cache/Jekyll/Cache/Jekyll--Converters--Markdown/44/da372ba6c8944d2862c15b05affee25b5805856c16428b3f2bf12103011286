I"_<h2 id="영속성-컨텍스트란"><span style="color:red">영속성 컨텍스트란?</span></h2>
<blockquote>
  <p>영속성 컨텍스트란 논리적인 개념으로 <code class="language-plaintext highlighter-rouge">"Entity 를 영구 저장하는 환경"</code> 이라는 의미이다.<br />
어플리케이션과 DB 사이에서 Entity 를 관리하고, EntityManager 를 통해 접근이 가능하다.</p>
</blockquote>

<h3 id="jpa에서-entity-는-다음과-같은-생명주기를-같는다"><u>JPA에서 Entity 는 다음과 같은 생명주기를 같는다.</u></h3>
<p><img src="/post-img/jpa/entity_lifecycle.PNG" alt="" /></p>

<ul>
  <li>비영속(new)<br />
객체를 생성만 하고 아직 영속성 컨텍스트에서는 관리하지 않는 상태</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
<span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="s">"member1"</span><span class="o">);</span>
</code></pre></div></div>

<ul>
  <li>영속(managed)<br />
persist를 통해 영속성 컨텍스트에서 관리되고 있는 상태</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
<span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="s">"member1"</span><span class="o">);</span>

<span class="nc">EntityManager</span> <span class="n">em</span> <span class="o">=</span> <span class="n">emf</span><span class="o">.</span><span class="na">createEntityManager</span><span class="o">();</span>
<span class="n">em</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">().</span><span class="na">begin</span><span class="o">();</span>
<span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
</code></pre></div></div>

<ul>
  <li>준영속(detached)<br />
영속성 컨텍스트에서 분리해서 더이상 관리하지 않게함
-&gt; 영속성 컨텍스트에서만 사라질 뿐 DB에 영향을 주지는 않는다.<br />
Entity 를 준영속 상태로 만드는 방법은 아래와 같다.
    <ul>
      <li>em.detach(entity) : 특정 Entity 만 준영속 상태로 변환</li>
      <li>em.clear() : 영속성 컨텍스트를 완전히 초기화</li>
      <li>em.close() : 영속성 컨텍스트를 종료</li>
    </ul>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">em</span><span class="o">.</span><span class="na">detach</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
</code></pre></div></div>

<ul>
  <li>삭제(removed)<br />
Entity 를 영속성 컨텍스트와 DB에서 삭제</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">em</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
</code></pre></div></div>

<p><br /></p>
<h3 id="영속성-컨텍스트가-entity-를-관리하는-방식은-다음과-같다"><u>영속성 컨텍스트가 Entity 를 관리하는 방식은 다음과 같다.</u></h3>

<ol>
  <li>등록/삭제
<br />
<img src="/post-img/jpa/persistence_context_persist.PNG" alt="" /></li>
</ol>

<p>등록의 경우, persist() 함수를 호출해서 Entity 를 영속성 컨텍스트에서 관리하는 상태로 만든다.<br />
이때 해당 Entity 는 <code class="language-plaintext highlighter-rouge">1차 캐시</code> 에 저장되고, <code class="language-plaintext highlighter-rouge">쓰기 지연 SQL 저장소</code>에 Insert SQL 이 생성된다.<br />
삭제의 경우, 1차캐시의 변동 없이 쓰기 지연 SQL 저장소에 Delete SQL 이 생성된다.<br />
아직 이 당시에는 DB에는 저장되지 않는다.</p>

<p><br />
<img src="/post-img/jpa/persistence_context_commit.PNG" alt="" /></p>

<p>이후 commit() 함수를 호출하면 영속성 컨텍스트 내부에서 <code class="language-plaintext highlighter-rouge">flush</code> 가 발생하고<br /> 
쓰기 지연 SQL 저장소의 SQL을 DB로 전송한다.</p>

<ol>
  <li>수정
<br />
<img src="/post-img/jpa/persistence_context_update.PNG" alt="" /></li>
</ol>

<p>1차 캐시에 Entity를 저장할 때, 영속성 컨텍스트는 해당 Entity 의 <code class="language-plaintext highlighter-rouge">스냅샷</code>을 따로 저장한다.<br />
이후 아래처럼 1차캐시에 저장된 Entity 의 속성을 변경하려 할 경우</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Member</span> <span class="n">memberA</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"memberA"</span><span class="o">);</span>

<span class="n">memberA</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">"member_a"</span><span class="o">);</span>
<span class="n">memberA</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>

<span class="n">transaction</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">flush</code> 가 발생할 때 <code class="language-plaintext highlighter-rouge">변경감지(Dirty Checking)</code>가 발생하고,<br />
변경된 내용을 쓰기 지연 SQL 저장소에 update SQL 로 작성한다.</p>

<ol>
  <li>조회
<br />
<img src="/post-img/jpa/persistence_context_find.PNG" alt="" /></li>
</ol>

<p>조회의 경우 1차 캐시에 해당 Entity 가 있는지 우선 체크 한다.<br />
1차 캐시에 존재할 경우 해당 Entity 를 반환하고,<br />
만약 존재하지 않으면 DB 조회 후 리턴하면서 해당 Entity 를 1차 캐시에 저장한다.</p>

<p><br /></p>
<h2 id="to-be-continued"><span style="color:red">to be continued…</span></h2>
:ET