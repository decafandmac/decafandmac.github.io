I":<h2 id="bean-factory-와-applicationcontext">Bean Factory 와 ApplicationContext</h2>

<p><img src="/post-img/spring/bean_factory_hierarchy.PNG" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">BeanFactory 는 스프링 컨테이너의 최상위 인터페이스</code>이다. 스프링 빈을 조회/관리하는 역할을 담당하고, getBean()을 제공한다.<br />
하지만 어플리케이션을 개발할때에는 빈에 대한 조회/관리 이외에도 많은 기능을 필요로 한다.<br />
때문에 일반적으로 <code class="language-plaintext highlighter-rouge">여러 인터페이스를 상속받아서 기능을 제공하는 ApplicationContext 를 주로 사용</code>한다.<br /></p>

<ul>
  <li>MessageSource</li>
  <li>EnvironmentCapable</li>
  <li>ApplicationEventPublisher</li>
  <li>ResourceLoader</li>
</ul>

<p>등등<br />
<br /></p>

<h2 id="beandefinition">BeanDefinition</h2>

<p><img src="/post-img/spring/beandefinition.PNG" alt="" />
<img src="/post-img/spring/beandefinition_1.PNG" alt="" />
<img src="/post-img/spring/beandefinition_2.PNG" alt="" /></p>

<p>AnnotationConfigApplicationContext는 <code class="language-plaintext highlighter-rouge">AnnotatedBeanDefinitaionReader</code>를 통해 <span style="color:red"><code class="language-plaintext highlighter-rouge">Bean 메타정보를 생성한다.(BeanDefinitionRegistry)</code></span><br />
스프링 컨테이너는 이 메타정보를 통해 Bean을 생성한다. 즉, Bean 을 생성하는 코드가 Java 인지 XML 인지 알 필요가 없다.<br />
실제로 XML 을 통해 Bean 을 설정할때는 GenericXmlApplicationContext 를 사용한다. 이 때에도 최종적으로 BeanDefinitionRegistry 를 통해 메타정보가 생성되고,<br />
스프링 컨테이너는 이 메타정보만 참조한다.<br />
<br /></p>

<p>BeanDefinition 에는 대략 아래와 같은 정보가 있다.</p>

<blockquote>
  <p>Reference : <a href="https://www.inflearn.com/course/스프링-핵심-원리-기본편">인프런 [스프링 핵심 원리 - 기본편] by 김영한</a></p>
</blockquote>
:ET