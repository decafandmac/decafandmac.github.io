I"+<h2 id="상속관계-매핑">상속관계 매핑</h2>

<p>관계형 데이터베이스는 객체지향의 상속이라는 개념은 없지만 슈퍼타입/서브타입 관계의 모델링 기법이 객체 상속과 유사하다.<br />
공통의 부분을 슈퍼타입으로 모델링하고, 개별적으로 다른 엔티티와 차이가 있는 속성에 대해서는 <br />
각각 서브 엔티티로 표현하는 것이다.<br /></p>

<p><img src="/post-img/jpa/super_sub.PNG" alt="" /></p>

<p>구현 전략은 아래 3가지가 있고, <span style="color:red">슈퍼타입에 @Inheritance 어노테이션</span>을 통해 설정할 수 있다.<br /></p>
<ul>
  <li>조인 전략</li>
  <li>단일테이블 전략</li>
  <li>구현 클래스마다 테이블 전략
<br /></li>
</ul>

<h3 id="조인-전략">조인 전략</h3>

<p><img src="/post-img/jpa/inheritancetype_join.PNG" alt="" /></p>

<p>조인전략은 객체 모델링과 유사하게 공통 속성을 갖는 엔티티와 개별 속성을 갖는 각각의 엔티티를 나누는 것이다.<br />
이 전략의 경우 <span style="color:red">테이블을 정규화</span>하고 <span style="color:red">저장공간을 효율적</span>으로 사용할 수 있다. 그리고 <span style="color:red">FK참조 무결성 제약조건</span>도 활용 가능하다.<br />
반면 항상 공통/개별 엔티티를 조인해야 하기 때문에 <span style="color:red">성능의 저하</span>가 발생할 수 있고 <span style="color:red">조회쿼리가 복잡</span>해질 수 있다.<br />
그리고 데이터 저장 시 일반적으로 <span style="color:red">Insert 쿼리가 2번 호출</span>된다.(공통/개별)<br />
<br /></p>

<h3 id="단일테이블-전략">단일테이블 전략</h3>

<p><img src="/post-img/jpa/inheritancetype_single.PNG" alt="" /></p>

<p>이 전략은 모든 속성을 하나의 엔티티에 넣는 것이다.<br />
따라서 별도의 조인이 필요 없으므로 <span style="color:red">조회 성능이 빠르고 쿼리가 단순</span>하다.<br />
하지만 <span style="color:red">컬럼에 null 데이터</span>가 많아질 수 있고, <span style="color:red">테이블이 너무 비대</span>해져서 성능이 급격히 나빠 질 수도 있다.<br />
<br /></p>

<h3 id="구현-클래스마다-테이블-전략">구현 클래스마다 테이블 전략</h3>

<p><img src="/post-img/jpa/inheritancetype_each.PNG" alt="" /></p>

<p>이 전략은 모든 속성을 하나의 엔티티에 넣는 것이다.<br />
따라서 별도의 조인이 필요 없으므로 <span style="color:red">조회 성능이 빠르고 쿼리가 단순</span>하다.<br />
하지만 <span style="color:red">컬럼에 null 데이터</span>가 많아질 수 있고, <span style="color:red">테이블이 너무 비대</span>해져서 성능이 급격히 나빠 질 수도 있다.</p>
:ET