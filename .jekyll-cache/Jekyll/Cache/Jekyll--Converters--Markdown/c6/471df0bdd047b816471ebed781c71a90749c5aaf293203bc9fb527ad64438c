I"W<h2 id="연관관계-매핑">연관관계 매핑</h2>

<blockquote>
  <p>일반적으로 DB테이블은 FK 를 이용한 Join 을 통해 서로 간에 연관관계를 맺는다.<br />
이러한 내용을 객체지향 모델링에 반영하여 <code class="language-plaintext highlighter-rouge">객체의 참조와 DB의 FK를 반영하는 것을 연관관계 매핑</code>이라 한다.<br /></p>
</blockquote>

<h2 id="연관관계의-주인">연관관계의 주인</h2>
<p>DB를 객체와 매핑할때는 <span style="color:red">DB의 FK에 해당하는 항목을 어느 객체에서 관리할 것인가</span>가 중요한 문제가 된다.<br />
이 FK를 관리하는 객체를 <span style="color:red">연관관계의 주인</span>이라 하는데<br />
명확하게 <span style="color:red"><code class="language-plaintext highlighter-rouge">FK가 포함된 DB의 테이블과 매핑된 객체를 연관관계의 주인</code></span>으로 설정하면 된다.<br />
이 주인 객체에서만 FK를 관리(등록, 수정) 하고, 양방향일 경우 반대 객체에서는 <span style="color:red"><code class="language-plaintext highlighter-rouge">mappedBy</code></span>를 통해 읽기만 가능하도록 처리한다.<br /></p>

<p>만약 반대로 세팅할 경우 아래처럼 의도치 않은 작동을 할 수 있다.<br />
<img src="/post-img/jpa/relation_mapping_1_N_single.PNG" alt="" /></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Team</span> <span class="n">team</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Team</span> <span class="o">{</span>
    <span class="nd">@OneToMany</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="nc">Name</span> <span class="o">=</span> <span class="s">"TEAM_ID"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">members</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;();</span>
<span class="o">}</span>

<span class="c1">// Member member1 = new Member();</span>
<span class="c1">// member1.setName("member1");</span>
<span class="c1">// em.persist(member1);</span>

<span class="c1">// Team team = new Team();</span>
<span class="c1">// team.setName("TeamA");</span>
<span class="c1">// team.addMember(member1); -&gt; Member 테이블에 update 쿼리가 나감</span>
<span class="c1">// em.persist(team);</span>
</code></pre></div></div>
<p>Member 테이블의 FK 관리를 Team 객체에서 하고 있기 때문에,<br />
<span style="color:red">Team 데이터 추가 시 전혀 관계없는 Member 에 Update 쿼리가 발생</span>하게 된다.<br />
나중에 테이블 구조나 프로그램 구조가 복잡해지게 되면 예상할 수 없는 쿼리의 실행이 발생할 수 있기 때문에<br />
되도록이면 위 형태는 사용하지 않는 것이 좋다.<br /></p>

<h2 id="단방향양방향-연관관계">단방향/양방향 연관관계</h2>
<p>객체의 연관관계는 DB와는 다르게 <span style="color:red">단방향, 양방향</span>이라는 방향성이 존재한다.<br />
DB의 경우 한쪽 테이블에 FK 가 존재하면 어느 테이블에서든 join 을 통해 서로간에 참조가 가능하지만<br />
객체의 경우 참조하고자 하는 객체의 참조가 존재하지 않으면 상대방을 참조할 수 없다.<br />
즉, <span style="color:red">양방향 연관관계는 단방향 연관관계 2개가 합쳐진 모양</span>이 된다.<br /></p>

<p><img src="/post-img/jpa/relation_mapping_N_1_dual.PNG" alt="" /></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Team</span> <span class="n">team</span><span class="o">;</span> <span class="c1">// Team 객체를 조회하기 위한 단방향 연관관계</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Team</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">members</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;();</span> <span class="c1">// Member 객체를 조회하기 위한 단방향 연관관계</span>
<span class="o">}</span>
</code></pre></div></div>
<p>위 예시를 보면 2개의 단방향 연관관계가 합쳐져서 서로간의 참조가 가능한 양방향 연관관계를 생성하고 있음을 알 수 있다.<br /></p>

<p>양방향 연관관계 시 흔히 하는 실수로<br />
한 쪽에만(주로 연관관계의 주인이 아닌 )</p>

<p>연관관계 매핑 유형에는 크게 4가지가 있다.</p>

<ul>
  <li>@ManyToOne(N:1)</li>
  <li>@OneToMany(1:N)</li>
</ul>

<blockquote>
  <p>Reference : <a href="https://www.inflearn.com/course/ORM-JPA-Basic/dashboard">인프런 [자바 ORM 표준 JPA 프로그래밍 - 기본편] by 김영한</a></p>
</blockquote>
:ET